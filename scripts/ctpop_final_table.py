import json
import os
import collections
import requests
import csv
import pandas as pd


url_collision_detection = "http://192.168.1.100:8080/get-collisions"


# set of dataset_ids
def load_hubmap_dataset_ids(csv_dir_path):
    dir_list = os.listdir(csv_dir_path)
    return [e[:-4] for e in dir_list if e.endswith('.csv')]

def load_hubmap_dataset_ids(training_prediction_table):

    pass

# load Devin's json file ct_pop_total.json
def parse_dataset_id_to_hubmap_tissue_block_id_rui(json_path, set_dataset_id):

    dic_hubmap_tissue_block_id_to_rui_and_dataset_id = {}

    with open(json_path, 'r') as f:
        json_data = json.load(f)
        for dataset_id, values in json_data.items():
            if 'rui-location' in values:

                rui_location = values['rui-location']
                if not rui_location:
                    continue
                if 'hubmap-id' in values:
                    tissue_block_id = values['hubmap-id']
                elif 'sample-id' in values:
                    tissue_block_id = values['sample-id']
                else:
                    continue

                if tissue_block_id not in dic_hubmap_tissue_block_id_to_rui_and_dataset_id:
                    # tissue block id is also dataset id.
                    if tissue_block_id in set_dataset_id:
                        dic_hubmap_tissue_block_id_to_rui_and_dataset_id[tissue_block_id] = {
                            "rui_location": rui_location, "dataset_id_list": [tissue_block_id]}
                    else:
                        dic_hubmap_tissue_block_id_to_rui_and_dataset_id[tissue_block_id] = {
                            "rui_location": rui_location, "dataset_id_list": []}

                if dataset_id.endswith('.csv'):

                    new_dataset_id = dataset_id[:-4]
                else:
                    new_dataset_id = dataset_id

                # in json: dataset_id + donor + organ, in bar graph portal: dataset_id + donor
                # CxG maps the dataset_id in json to dataset_id in bar graph portal.
                # generated by training/prediction table
                if new_dataset_id in CxG:
                    new_dataset_id = CxG[new_dataset_id]

                if new_dataset_id in set_dataset_id:
                    dic_hubmap_tissue_block_id_to_rui_and_dataset_id[tissue_block_id]["dataset_id_list"].append(
                        new_dataset_id)

    return dic_hubmap_tissue_block_id_to_rui_and_dataset_id


def compute_ctpop(dic_hubmap_tissue_block_id_to_rui_and_dataset_id, csv_dir_path):
    mapping_AS_cell_type_count = collections.defaultdict(dict)
    # only_collide_with = collections.Counter()
    # not_only_collide_with = collections.Counter()
    collide_with = {}

    for tissue_block_id, values in dic_hubmap_tissue_block_id_to_rui_and_dataset_id.items():
        rui_location = values["rui_location"]
        dataset_id_list = values["dataset_id_list"]

        dic_cell_type_count = collections.defaultdict(list)
        dic_cell_type_avg_count = collections.Counter()

        for dataset_id in dataset_id_list:
            csv_path = os.path.join(csv_dir_path, dataset_id + '.csv')

            with open(csv_path, 'r', encoding='UTF8') as csv_file:
                dataset_csv_reader = csv.reader(csv_file)
                header = next(dataset_csv_reader)
                cell_type_index = header.index('cell_type')
                count_index = header.index('count')

                for item_cell in dataset_csv_reader:
                    dic_cell_type_count[item_cell[cell_type_index]].append(float(item_cell[count_index]))

        # average all the datasets for the same tissue block
        for cell, count_list in dic_cell_type_count.items():
            dic_cell_type_avg_count[cell] = sum(count_list) / len(dataset_id_list)

        # estimate CTPop
        post_response = requests.post(url=url_collision_detection, json=rui_location)
        try:
            post_response = post_response.json()

            for AS_item in post_response:
                # percentage_of_AS = AS_item['percentage_of_AS']
                # percentage_of_tissue_block = AS_item['percentage_of_tissue_block']
                organ = AS_item['organ']
                node_name = AS_item['node_name']
                AS_volume = AS_item['AS_volume']

                if (organ, node_name) not in collide_with:
                    # [AS volume, not only collide with, only collide with, number of tissue block with no CT info]
                    collide_with[(organ, node_name)] = [AS_volume, 0, 0, 0]

                # tissue block with no CT info
                if len(dataset_id_list) == 0:
                    collide_with[(organ, node_name)][3] += 1

                collide_with[(organ, node_name)][1] += 1

            # estimate the CT population in a certain AS using the tissue blocks that only collide with it
            if len(post_response) == 1:
                AS_item = post_response[0]
                percentage_of_AS = AS_item['percentage_of_AS']
                percentage_of_tissue_block = AS_item['percentage_of_tissue_block']
                organ = AS_item['organ']
                node_name = AS_item['node_name']
                collide_with[(organ, node_name)][2] += 1

                if node_name == 'VH_M_outer_cortex_of_kidney_R':
                    print("***********************test********************")

                # record different tissue blocks for a certain AS.
                for cell, avg_count in dic_cell_type_avg_count.items():
                    # initialize
                    if cell not in mapping_AS_cell_type_count[(organ, node_name)]:
                        mapping_AS_cell_type_count[(organ, node_name)][cell] = []

                    if 'Skin' in organ:
                        mapping_AS_cell_type_count[(organ, node_name)][cell].append(
                            avg_count * percentage_of_tissue_block / percentage_of_AS)
                    else:
                        mapping_AS_cell_type_count[(organ, node_name)][cell].append(avg_count * percentage_of_tissue_block / percentage_of_AS)


                # for cell, avg_count in dic_cell_type_avg_count.items():
                #     # initialize
                #     if cell not in mapping_AS_cell_type_count[(organ, node_name)]:
                #         mapping_AS_cell_type_count[(organ, node_name)][cell] = []
                #
                #     if 'Skin' in organ:
                #         mapping_AS_cell_type_count[(organ, node_name)][cell].append(
                #             avg_count * percentage_of_tissue_block / percentage_of_AS)
                #     else:
                #         mapping_AS_cell_type_count[(organ, node_name)][cell].append(avg_count / percentage_of_AS)


        except Exception:
            pass

    result = collections.defaultdict(dict)
    for (organ, node_name) in mapping_AS_cell_type_count:
        for cell in mapping_AS_cell_type_count[(organ, node_name)]:
            cell_list = mapping_AS_cell_type_count[(organ, node_name)][cell]
            if 'Skin' in organ:
                print(organ, cell, cell_list)
            if len(cell_list) == 0:

                print('cell_list is 0', organ, node_name, cell)
            else:
                result[(organ, node_name)][cell] = int(sum(cell_list) / len(cell_list))

    return result, collide_with


def create_table5big(result, output_path):

    # file_cell_type_count_per_AS = './csv/cell_type_count_per_AS.csv'

    with open(output_path, 'w', encoding='UTF-8', newline='') as f:
        csv_writer = csv.writer(f)
        for (organ, AS) in result:
            dic_cell_type_count = result[(organ, AS)]

            for cell_type, count in dic_cell_type_count.items():
                csv_writer.writerow([organ, AS, cell_type, count])


def create_table5(result, collide_with, output_path):

    with open(output_path, 'w', encoding='UTF-8', newline="") as f:
        csv_writer = csv.writer(f)
        # header
        csv_writer.writerow(['Name_of_organ',
                             'Name_of_colliding_AS',
                             'Volume_of_colliding_AS',
                             'Number_tissue_blocks_colliding_only_with_this_AS',
                             'Total_number_colliding_tissue_blocks',
                             'Number_of_colliding_tissue_blocks with_no_CT_info',
                             'Number of predicted CTs'])

        for (organ, AS), values in collide_with.items():
            AS_volume, not_only_collide_with, only_collide_with, number_of_colliding_tissue_block_no_CT_info = values
            dic_cell_type_count = result[(organ, AS)]

            cells = [cell_name for cell_name in dic_cell_type_count]
            cell_types = len(result[(organ, AS)])

            csv_writer.writerow([organ, AS, AS_volume, only_collide_with, not_only_collide_with, number_of_colliding_tissue_block_no_CT_info, cell_types, ','.join(cells)])

    pass


def find_dataset_with_ct_without_rui(training_prediction_table_path, csv_dir_path, json_path):
    all_dataset_id_with_ct = load_hubmap_dataset_ids(csv_dir_path)
    df = pd.read_csv(training_prediction_table_path)

    with open(json_path, 'r') as f:
        json_data = json.load(f)
        dataset_with_rui_location = json_data.keys()

    result = []
    dataset_not_in_tissue_bar_graph_portal = []

    for index, row in df.iterrows():
        source, dataset_id = row['source'], row['dataset_id']

        if dataset_id.endswith('.csv'):
            dataset_id = dataset_id[:-4]

        # different dataset id for CxG data.
        dataset_id_tissue_bar_graph = dataset_id_all_rui = dataset_id

        if source == 'CxG':
            donor_id = row['non_hubmap_donor_id']
            dataset_id_all_rui = row['CxG_dataset_id_donor_id_organ']
            # print(dataset_id, donor_id)
            if pd.isna(donor_id):
                donor_id = ""
            dataset_id_tissue_bar_graph = dataset_id + '_' + str(donor_id)

        if dataset_id_tissue_bar_graph.startswith('b4c3c03b-99cd-407a-a824-1875e00a04ad'):
            print("stop")
        if dataset_id_tissue_bar_graph not in all_dataset_id_with_ct:
            # print(dataset_id, ' has no associated ct info')
            if not pd.isna(row['number_of_unique_cell_types']):
                # print(dataset_id, ' should have ct info from Vicky/Devin but not exist in tissue-bar-graph portal')
                dataset_not_in_tissue_bar_graph_portal.append(dataset_id)

        if pd.notna(dataset_id_all_rui):
            if dataset_id_all_rui + '.csv' not in dataset_with_rui_location and dataset_id_all_rui not in dataset_with_rui_location:
                result.append(dataset_id_tissue_bar_graph)

    df = pd.DataFrame()
    df['dataset with ct without rui: dataset id'] = result
    df.to_csv('./csv/dataset_with_ct_without_rui.csv', index=False)
    # print('dataset with ct without rui: dataset id: ', result)
    print( dataset_not_in_tissue_bar_graph_portal, ' should have ct info from Vicky/Devin but not exist in tissue-bar-graph portal')
    print(len(dataset_not_in_tissue_bar_graph_portal))


def find_tissue_block_with_rui_without_ct(csv_dir_path, json_path):
    set_dataset_id = load_hubmap_dataset_ids(csv_dir_path)
    dic_hubmap_tissue_block_id_to_rui_and_dataset_id = parse_dataset_id_to_hubmap_tissue_block_id_rui(json_path, set_dataset_id)

    result = []

    for tissue_block_id, values in dic_hubmap_tissue_block_id_to_rui_and_dataset_id.items():
        dataset_id_list = values["dataset_id_list"]

        if len(dataset_id_list) == 0:
            result.append(tissue_block_id)

    df = pd.DataFrame()
    df['tissue blocks with rui without ct: tissue block id'] = result
    df.to_csv('./csv/tissue_block_with_rui_without_ct.csv', index=False)
    print('tissue blocks with rui without ct: tissue block id: ', result)


def find_dataset_id_either_rui_ct(training_prediction_table_path, csv_dir_path, json_path):
    all_dataset_id_with_ct = load_hubmap_dataset_ids(csv_dir_path)
    dataset_id_with_ct_without_rui = []
    dataset_id_without_ct_with_rui = []

    with open(json_path, 'r') as f:
        json_data = json.load(f)
        dataset_with_rui_location = json_data.keys()

    df = pd.read_csv(training_prediction_table_path)

    for index, row in df.iterrows():
        source, dataset_id = row['source'], row['dataset_id']

        if dataset_id.endswith('.csv'):
            dataset_id = dataset_id[:-4]

        # different dataset id for CxG data.
        dataset_id_tissue_bar_graph = dataset_id_all_rui = dataset_id

        if source == 'CxG':
            donor_id = row['non_hubmap_donor_id']
            dataset_id_all_rui = row['CxG_dataset_id_donor_id_organ']
            # print(dataset_id, donor_id)
            if pd.isna(donor_id):
                donor_id = ""
            dataset_id_tissue_bar_graph = dataset_id + '_' + str(donor_id)

        # dataset_id without ct but with rui
        if pd.notna(dataset_id_all_rui):
            if (dataset_id_tissue_bar_graph not in all_dataset_id_with_ct) and \
                    (dataset_id_all_rui + '.csv' in dataset_with_rui_location or dataset_id_all_rui in dataset_with_rui_location):
                dataset_id_without_ct_with_rui.append(dataset_id_tissue_bar_graph)

        # with ct but without rui
        if pd.notna(dataset_id_all_rui):
            if (dataset_id_tissue_bar_graph in all_dataset_id_with_ct) and \
                    (dataset_id_all_rui + '.csv' not in dataset_with_rui_location and dataset_id_all_rui not in dataset_with_rui_location):
                dataset_id_with_ct_without_rui.append(dataset_id_tissue_bar_graph)

    print('dataset_id_without_ct_with_rui', dataset_id_without_ct_with_rui)
    print('dataset_id_with_ct_without_rui', dataset_id_with_ct_without_rui)
    # df = pd.DataFrame()
    # df['dataset with ct without rui: dataset id'] = result
    # df.to_csv('./csv/dataset_with_ct_without_rui.csv', index=False)


def figure_2a(json_path):

    tissue_block_rui = {}

    with open(json_path, 'r') as f:
        json_data = json.load(f)
        for dataset_id, values in json_data.items():
            if 'rui-location' in values:
                rui_location = values['rui-location']
                if not rui_location:
                    continue
                if 'hubmap-id' in values:
                    tissue_block_id = values['hubmap-id']
                elif 'sample-id' in values:
                    tissue_block_id = values['sample-id']
                else:
                    continue

                tissue_block_rui[tissue_block_id] = rui_location

    number_of_tissue_per_organ = collections.Counter()
    for tissue_block_id, rui_location in tissue_block_rui.items():
        post_response = requests.post(url=url_collision_detection, json=rui_location)
        try:
            post_response = post_response.json()
            if len(post_response) > 0:
                AS_item = post_response[0]
                organ = AS_item['organ']
                number_of_tissue_per_organ[organ] += 1

        except:
            pass

    df = pd.read_csv('../../number_of_AS_v1.3.csv')
    df['number_of_tissue_block_registration_based_on_Lu'] = df['organ'].map(number_of_tissue_per_organ)

    df.to_csv('./csv/figure2a-v1.2.csv', index=False)


def main():

    training_prediction_table = "CTPop - Training_Prediction Datasets - Training_Prediction.csv"
    csv_dir_path = "../all_csv"
    json_path = "./all_rui_location_by_dataset_id.json"
    table5big = "./csv/table5big-test.csv"
    table5 = './csv/table5-test.csv'

    # task 1 create table5 and table5big
    set_dataset_id = load_hubmap_dataset_ids(csv_dir_path)
    dic_hubmap_tissue_block_id_to_rui_and_dataset_id = parse_dataset_id_to_hubmap_tissue_block_id_rui(json_path,
                                                                                                      set_dataset_id)

    result, collide_with = compute_ctpop(dic_hubmap_tissue_block_id_to_rui_and_dataset_id, csv_dir_path)
    create_table5big(result, table5big)
    create_table5(result, collide_with, table5)

    # for asss, cell in result.items():
    #     print(asss, cell)

    # find_dataset_with_ct_without_rui(training_prediction_table, csv_dir_path, json_path)
    # find_tissue_block_with_rui_without_ct(csv_dir_path, json_path)
    # find_dataset_id_either_rui_ct(training_prediction_table, csv_dir_path, json_path)

    # figure_2a(json_path)

if __name__ == "__main__":
    main()





